:- dynamic
    xpozytywne/2,
    xnegatywne/2.

jezyk(scala) :- jest(skomplikowany),
                typowany(statycznie),
                pozytywne(ma, pattern_matching),
                pozytywne(ma, lambdy),
                pozytywne(ma, inferencja_typow),
                negatywne(ma, duck_typing),
                ma_framework_do(big_data),
                ma_framework_do(tworzenie_serwisow),
                (
                    ma_paradygmat(funkcyjny);
                    ma_paradygmat(obiektowy);
                    ma_paradygmat(imperatywny)
                ),
                podobny_do(java).

jezyk(csharp) :- jest(prosty), 
                 typowany(statycznie),
                 negatywne(ma, pattern_matching),
                 pozytywne(ma, lambdy),
                 pozytywne(ma, inferencja_typow),
                 negatywne(ma, duck_typing),
                 ma_framework_do(big_data),
                 ma_framework_do(tworzenie_serwisow),
                 ma_paradygmat(obiektowy),
                 podobny_do(java).

jezyk(java) :-  jest(prosty),
                typowany(statycznie),
                negatywne(ma, pattern_matching),
                pozytywne(ma, lambdy),
                negatywne(ma, inferencja_typow),
                negatywne(ma, duck_typing),
                ma_framework_do(big_data),
                ma_framework_do(tworzenie_serwisow),
                (
                    ma_paradygmat(obiektowy);
                    ma_paradygmat(imperatywny)
                ).

jezyk(haskell)  :-  jest(skomplikowany),
                    typowany(statycznie),
                    pozytywne(ma, pattern_matching),
                    pozytywne(ma, lambdy),
                    pozytywne(ma, inferencja_typow),
                    pozytywne(ma, duck_typing),
                    ma_paradygmat(funkcyjny).

jezyk(python) :-    jest(prosty),
                    typowany(dynamicznie),
                    negatywne(ma, pattern_matching),
                    pozytywne(ma, lambdy),
                    negatywne(ma, inferencja_typow),
                    pozytywne(ma, duck_typing),
                    ma_framework_do(big_data),
                    ma_framework_do(tworzenie_serwisow),
                    (
                        ma_paradygmat(funkcyjny);
                        ma_paradygmat(obiektowy);
                        ma_paradygmat(imperatywny)
                    ).

jezyk(lisp) :-  jest(skomplikowany),
                typowany(dynamicznie),
                negatywne(ma, pattern_matching),
                pozytywne(ma, lambdy),
                negatywne(ma, inferencja_typow),
                ma_paradygmat(funkcyjny).

jezyk(erlang) :- jest(skomplikowany),
                 typowany(dynamicznie),
                 pozytywne(ma, pattern_matching),
                 pozytywne(ma, lambdy),
                 pozytywne(ma, inferencja_typow),
                 pozytywne(ma, duck_typing),
                 ma_framework_do(big_data),
                 ma_framework_do(tworzenie_serwisow),
                 (
                        ma_paradygmat(funkcyjny);
                        ma_paradygmat(obiektowy);
                        ma_paradygmat(imperatywny)
                 ).

jest(prosty) :- negatywne(ma, skomplikowana_skladnia), pozytywne(ma, dokumentacja).
jest(skomplikowany) :-  pozytywne(ma, skomplikowana_skladnia).
jest(skomplikowany) :-  negatywne(ma, dokumentacja).

typowany(statycznie) :- pozytywne(ma, typy_rozwiazywane_podczas_kompilacji).
typowany(dynamicznie) :- negatywne(ma, typy_rozwiazywane_podczas_kompilacji).

ma_framework_do(big_data) :- (  
                                pozytywne(ma, interfejs_do_hadoopa);
                                pozytywne(ma, implementacje_sparka)
                             ).


ma_framework_do(tworzenie_serwisow) :- (   
                                        ma_framework(play);
                                        ma_framework(spring);
                                        ma_framework(django);
                                        ma_framework(dotnet)
                                       ).

ma_framework(X) :- pozytywne(ma_framework, X).
                                  
podobny_do(X) :- pozytywne(podobny_do, X).

ma_paradygmat(obiektowy) :- pozytywne(ma, dziedziczenie).
ma_paradygmat(obiektowy) :- pozytywne(ma, enkapsulacje).

ma_paradygmat(imperatywny) :-   pozytywne(ma, mutacje).
ma_paradygmat(imperatywny) :-   pozytywne(ma, efekty_uboczne).

ma_paradygmat(funkcyjny) :- negatywne(ma, efekty_uboczne).
ma_paradygmat(funkcyjny) :- negatywne(ma, mutacje).

pozytywne(X,Y) :- xpozytywne(X,Y), !.
pozytywne(X,Y) :- \+xnegatywne(X,Y), pytaj(X,Y,tak).

negatywne(X,Y) :- xnegatywne(X,Y), !.
negatywne(X,Y) :- \+xpozytywne(X,Y), pytaj(X,Y,nie).

pytaj(X,Y,tak) :- !, format('~w ten jezyk ~w ? (t/n)~n',[X,Y]),
                    read(Reply),
                    (Reply = 't'),
                    pamietaj(X,Y,tak).
                    
pytaj(X,Y,nie) :- !, format('~w ten jezyk ~w ? (t/n)~n',[X,Y]),
                    read(Reply),
                    (Reply = 'n'),
                    pamietaj(X,Y,nie).
                    
pamietaj(X,Y,tak) :- assertz(xpozytywne(X,Y)).

pamietaj(X,Y,nie) :- assertz(xnegatywne(X,Y)).

wyczysc_fakty :- write('Przycisnij cos aby wyjsc'), nl,
                    retractall(xpozytywne(_,_)),
                    retractall(xnegatywne(_,_)).
                    
wykonaj :- jezyk(X), !,
            format('~nTwoim jezykiem moze byc ~w', X),
            nl, wyczysc_fakty.
            
wykonaj :- write('Nie jestem w stanie odgadnac co to za jezyk.'), nl,
            wyczysc_fakty.

#############################

podobienstwo jezykow?
algolowe? lispowe?
biblioteki, dostepne mechanizmy.
wspolbiezne?
cechy szczegolne (aktory - erlang)